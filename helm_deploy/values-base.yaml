# Values to start up datahub after starting up the datahub-prerequisites chart with "prerequisites" release name
datahub-gms:
  enabled: true
  image:
    repository: acryldata/datahub-gms
  securityContext:
    runAsUser: 100
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  resources:
    limits:
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 1Gi
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 8
  readinessProbe:
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 8
  service:
    type: ClusterIP
  serviceMonitor:
    create: true

datahub-frontend:
  enabled: true
  fullnameOverride: ""
  image:
    repository: acryldata/datahub-frontend-react
    # tag: "v0.10.0" # # defaults to .global.datahub.version
  extraVolumes:
    - name: datahub-users
      secret:
        defaultMode: 0444
        secretName: datahub-users-secret
  extraVolumeMounts:
    - name: datahub-users
      mountPath: /datahub-frontend/conf/user.props
      subPath: user.props
  extraEnvs:
    - name: "AUTH_OIDC_EXTRACT_GROUPS_ENABLED"
      value: "true"
    # Allow both user/pass login & SSO authentication https://datahubproject.io/docs/authentication/guides/add-users/
    - name: "AUTH_JAAS_ENABLED"
      value: "true"
    - name: "OPENSEARCH_USE_AWS_IAM_AUTH"
      value: "true"
  service:
    type: ClusterIP
  serviceMonitor:
    create: true
  lifecycle: {}
  resources:
    limits:
      memory: 1400Mi
    requests:
      cpu: 100m
      memory: 512Mi
  podSecurityContext:
    fsGroup: 101
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 100
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  # Set up ingress to expose react front-end
  ingress:
    enabled: true
    className: default
    annotations:
      external-dns.alpha.kubernetes.io/set-identifier: ""
      external-dns.alpha.kubernetes.io/aws-weight: "100"
    tls:
      - hosts:
          - ""
    hosts:
      - host: ""
        paths:
          - /
  oidcAuthentication:
    enabled: true
    provider: azure
    clientId: ""
    clientSecretRef:
      secretRef: azure-secrets
      secretKey: client_secret
    azureTenantId: ""
    # user_name_claim: "email" # default "email"
    # user_name_claim_regex: "([^@]+)" # "([^@]+)"
  # opt-in to metadata service auth for frontend proxy service: https://github.com/acryldata/datahub/blob/master/docs/authentication/introducing-metadata-service-authentication.md#configuring-metadata-service-authentication
  auth:
    enabled: true

acryl-datahub-actions:
  enabled: true
  serviceAccount:
    name: ""
  podSecurityContext:
    fsGroup: 103
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 102
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  image:
    repository: acryldata/datahub-actions
    tag: v0.0.15
  # mount the k8s secret as a volume in the container, each key name is mounted as a
  # file on the mount path /etc/datahub/ingestion-secret-files
  # ingestionSecretFiles:
  #   name: ${K8S_SECRET_NAME}
  #   defaultMode: "0444"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  serviceMonitor:
    create: true

datahub-ingestion-cron:
  enabled: false

elasticsearchSetupJob:
  enabled: true
  serviceAccount: ""
  image:
    repository: acryldata/datahub-elasticsearch-setup
  extraEnvs:
    - name: USE_AWS_ELASTICSEARCH
      value: "true"
    - name: OPENSEARCH_USE_AWS_IAM_AUTH
      value: "true"
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]

kafkaSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-kafka-setup
    # tag: "v0.11.0" # defaults to .global.datahub.version
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 768Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 101
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 1000
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]

  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []

mysqlSetupJob:
  enabled: false

postgresqlSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-postgres-setup
    # tag: "v0.11.0" # defaults to .global.datahub.version
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 101
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 1000
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []
  extraEnvs:
    - name: "DATAHUB_DB_NAME"
      valueFrom:
        secretKeyRef:
          name: rds-postgresql-instance-output
          key: database_name

## No code data migration
datahubUpgrade:
  enabled: true
  image:
    repository: acryldata/datahub-upgrade
    # tag: "v0.11.0"  # defaults to .global.datahub.version
  batchSize: 1000
  batchDelayMs: 100
  noCodeDataMigration:
    sqlDbType: "POSTGRES"
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: before-hook-creation
  podSecurityContext:
    fsGroup: 101
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 100
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  podAnnotations: {}
  extraSidecars: []
  cleanupJob:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 300m
        memory: 256Mi
    concurrencyPolicy: Allow
    extraSidecars: []
  restoreIndices:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 300m
        memory: 256Mi
    concurrencyPolicy: Allow
    extraSidecars: []
    extraEnvs:
      - name: "DATAHUB_DB_NAME"
        valueFrom:
          secretKeyRef:
            name: rds-postgresql-instance-output
            key: database_name
  extraInitContainers: []

## Runs system update processes
## Includes: Elasticsearch Indices Creation/Reindex (See global.elasticsearch.index for additional configuration)
datahubSystemUpdate:
  image:
    repository: acryldata/datahub-upgrade
    # tag:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: before-hook-creation
  # Split the system update into 2 jobs, one that is blocking the rest of
  # the deployment and the other which is non-blocking. Once the blocking
  # steps are completed, the non-blocking job runs while the rest of the
  # system is starting.
  nonblocking:
    enabled: false
    # When mode = 'nonblocking' the nonblocking job should not include the above helm.sh/hook annotations
    annotations:
      # This is what defines this resource as a hook. Without this line, the
      # job is considered part of the release.
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: before-hook-creation
    image:
      args:
      # Add custom command / arguments to this job.  Useful if you need a custom startup or shutdown script
      # to run
      # command: customCommand
      # args: []
  podSecurityContext:
    fsGroup: 101
  securityContext:
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    runAsUser: 100
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]
  podAnnotations: {}
  resources:
    limits:
      cpu: 800m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 256Mi
  extraSidecars: []
  extraInitContainers: []

global:
  strict_mode: true
  graph_service_impl: elasticsearch
  datahub_analytics_enabled: true
  datahub_standalone_consumers_enabled: false

  elasticsearch:
    #  The host is the core of the proxy url (minus "https://" prefix and ":port" suffix)
    host: ""
    port: "8080"
    useSSL: "false"

    ## The following section controls when and how reindexing of elasticsearch indices are performed
    index:
      ## Enable reindexing when mappings change based on the data model annotations
      enableMappingsReindex: true

      ## Enable reindexing when static index settings change.
      ## Dynamic settings which do not require reindexing are not affected
      ## Primarily this should be enabled when re-sharding is necessary for scaling/performance.
      enableSettingsReindex: true

      ## Index settings can be overridden for entity indices or other indices on an index by index basis
      ## Some index settings, such as # of shards, requires reindexing while others, i.e. replicas, do not
      ## Non-Entity indices do not require the prefix
      # settingsOverrides: '{"graph_service_v1":{"number_of_shards":"5"},"system_metadata_service_v1":{"number_of_shards":"5"}}'
      ## Entity indices do not require the prefix or suffix
      # entitySettingsOverrides: '{"dataset":{"number_of_shards":"10"}}'

      ## The amount of delay between indexing a document and having it returned in queries
      ## Increasing this value can improve performance when ingesting large amounts of data
      # refreshIntervalSeconds: 1

      ## The following options control settings for datahub-upgrade job when creating or reindexing indices
      upgrade:
        ## When reindexing is required, this option will clone the existing index as a backup
        ## The clone indices are not currently managed.
        cloneIndices: true

        ## Typically when reindexing the document counts between the original and destination indices should match.
        ## In some cases reindexing might not be able to proceed due to incompatibilities between a document in the
        ## orignal index and the new index's mappings. This document could be dropped and re-ingested or restored from
        ## the SQL database.
        ##
        ## This setting allows continuing if and only if the cloneIndices setting is also enabled which
        ## ensures a complete backup of the original index is preserved.
        allowDocCountMismatch: false

    ## Search related configuration
    search:
      ## Maximum terms in aggregations
      maxTermBucketSize: 20

      ## Configuration around exact matching for search
      exactMatch:
        ## if false will only apply weights, if true will exclude non-exact
        exclusive: false
        ## include prefix exact matches
        withPrefix: true
        ## boost multiplier when exact with case
        exactFactor: 2.0
        ## boost multiplier when exact prefix
        prefixFactor: 1.6
        ## stacked boost multiplier when case mismatch
        caseSensitivityFactor: 0.7
        ## enable exact match on structured search
        enableStructured: true

      ## Configuration for graph service dao
      graph:
        ## graph dao timeout seconds
        timeoutSeconds: 50
        ## graph dao batch size
        batchSize: 1000
        ## graph dao max result size
        maxResult: 10000

      custom:
        enabled: false
        # See documentation: https://datahubproject.io/docs/how/search/#customizing-search
        # default config: https://github.com/acryldata/datahub-helm/blob/master/charts/datahub/values.yaml#L481-L554

  kafka:
    bootstrap:
      server: "prerequisites-kafka:9092"
    zookeeper:
      server: "prerequisites-zookeeper:2181"
    # This section defines the names for the kafka topics that DataHub depends on, at a global level. Do not override this config
    # at a sub-chart level.
    topics:
      metadata_change_event_name: "MetadataChangeEvent_v4"
      failed_metadata_change_event_name: "FailedMetadataChangeEvent_v4"
      metadata_audit_event_name: "MetadataAuditEvent_v4"
      datahub_usage_event_name: "DataHubUsageEvent_v1"
      metadata_change_proposal_topic_name: "MetadataChangeProposal_v1"
      failed_metadata_change_proposal_topic_name: "FailedMetadataChangeProposal_v1"
      metadata_change_log_versioned_topic_name: "MetadataChangeLog_Versioned_v1"
      metadata_change_log_timeseries_topic_name: "MetadataChangeLog_Timeseries_v1"
      platform_event_topic_name: "PlatformEvent_v1"
      datahub_upgrade_history_topic_name: "DataHubUpgradeHistory_v1"
    maxMessageBytes: "5242880" # 5MB
    producer:
      compressionType: none
      maxRequestSize: "5242880" # 5MB
    consumer:
      maxPartitionFetchBytes: "5242880" # 5MB
    ## For AWS MSK set this to a number larger than 1
    # partitions: 3
    # replicationFactor: 3
    schemaregistry:
      # GMS Implementation - `url` configured based on component context
      type: INTERNAL
      # Glue Implementation - `url` not applicable
      # type: AWS_GLUE
      # glue:
      #   region: us-east-1
      #   registry: datahub

  sql:
    datasource:
      host: ""
      # as host, minus ":port"
      hostForpostgresqlClient: ""
      port: "5432"
      # url is format "jdbc:postgresql://{host}/{database_name}"
      url: ""
      driver: "org.postgresql.Driver"
      username:
        secretRef: rds-postgresql-instance-output
        secretKey: database_username
      password:
        secretRef: rds-postgresql-instance-output
        secretKey: database_password
      extraEnvs:
        - name: "DATAHUB_DB_NAME"
          valueFrom:
            secretKeyRef:
              name: rds-postgresql-instance-output
              key: database_name

  datahub:
    version: v0.13.3
    gms:
      port: "8080"
      nodePort: "30001"

    frontend:
      validateSignUpEmail: true

    monitoring:
      enablePrometheus: true

    mae_consumer:
      port: "9091"
      nodePort: "30002"

    appVersion: "1.0"
    systemUpdate:
      ## The following options control settings for datahub-upgrade job which will
      ## managed ES indices and other update related work
      enabled: true

    encryptionKey:
      secretRef: "datahub-encryption-secrets"
      secretKey: "encryption_key_secret"
      provisionSecret:
        enabled: true
        autoGenerate: true
        annotations: {}

    managed_ingestion:
      enabled: true
      defaultCliVersion: "0.13.3"

    metadata_service_authentication:
      enabled: true
      systemClientId: "__datahub_system"
      systemClientSecret:
        secretRef: "datahub-auth-secrets"
        secretKey: "system_client_secret"
      tokenService:
        signingKey:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_signing_key"
        salt:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_salt"
      provisionSecrets:
        enabled: true
        autoGenerate: true
        annotations: {}

    ## Enables always emitting a MCL even when no changes are detected. Used for Time Based Lineage when no changes occur.
    alwaysEmitChangeLog: false

    ## Enables diff mode for graph writes, uses a different code path that produces a diff from previous to next to write relationships instead of wholesale deleting edges and reading
    enableGraphDiffMode: true

    ## Values specific to the unified search and browse feature.
    search_and_browse:
      show_search_v2: true
      show_browse_v2: true
      # If on, run the backfill upgrade job that generates default browse paths for relevant entities
      backfill_browse_v2: true
