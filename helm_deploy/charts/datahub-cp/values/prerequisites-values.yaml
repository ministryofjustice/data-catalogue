datahub-prerequisites:
  # Default configuration for pre-requisites to get you started
  # Copy this file and update to the configuration of choice
  elasticsearch:
    enabled: false # set this to false, if you want to provide your own ES instance.

  # Official neo4j chart, supports both community and enterprise editions
  # see https://neo4j.com/docs/operations-manual/current/kubernetes/ for more information
  # source: https://github.com/neo4j/helm-charts
  neo4j:
    enabled: false
    nameOverride: neo4j
    neo4j:
      name: neo4j
      edition: "community"
      acceptLicenseAgreement: "yes"
      defaultDatabase: "graph.db"
      password: "datahub"
      # For better security, add password to neo4j-secrets k8s secret with  neo4j-username neo4j-passwordn and NEO4J_AUTH and uncomment below
      # NEO4J_AUTH: should be composed like so: {Username}/{Password}
      # passwordFromSecret: neo4j-secrets

    # Set security context for pod
    securityContext:
      runAsNonRoot: true
      runAsUser: 7474
      runAsGroup: 7474
      fsGroup: 7474
      fsGroupChangePolicy: "Always"

    # Disallow privilegeEscalation on container level
    containerSecurityContext:
      allowPrivilegeEscalation: false

    # Create a volume for neo4j, SSD storage is recommended
    volumes:
      {}
      # data:
      #   mode: "dynamic"
      #   dynamic:
      #     storageClassName: managed-csi-premium

    env:
      NEO4J_PLUGINS: '["apoc"]'

  mysql:
    enabled: false

  postgresql:
    enabled: false

  # Using gcloud-proxy requires the node in a GKE cluster to have Cloud SQL Admin scope,
  # you will need to create a new node and migrate the workload if your current node does not have this scope
  gcloud-sqlproxy:
    enabled: false

  cp-helm-charts:
    enabled: false
    # Schema registry is under the community  license
    cp-schema-registry:
      enabled: false
      securityContext:
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        runAsNonRoot: true
      kafka:
        bootstrapServers: "prerequisites-kafka:9092" # <<release-name>>-kafka:9092
    cp-kafka:
      enabled: false
    cp-zookeeper:
      enabled: false
    cp-kafka-rest:
      enabled: false
    cp-kafka-connect:
      enabled: false
    cp-ksql-server:
      enabled: false
    cp-control-center:
      enabled: false

  # Bitnami version of Kafka that deploys open source Kafka https://artifacthub.io/packages/helm/bitnami/kafka
  kafka:
    enabled: true
    listeners:
      client:
        protocol: PLAINTEXT
      interbroker:
        protocol: PLAINTEXT
    controller:
      replicaCount: 0
    broker:
      replicaCount: 2
      # The new minId for broker is 100. If we don't override this, the broker will have id 100
      # and cannot load the partitions. So we set minId to 0 to be backwards compatible
      minId: 0
      # These server properties are no longer exposed as parameters in the bitnami kafka chart since 24.0.0
      # They need to be passed in through extraConfig. See below for reference
      # https://github.com/bitnami/charts/tree/main/bitnami/kafka#to-2400
      extraConfig: |
        message.max.bytes=5242880
        default.replication.factor=1
        offsets.topic.replication.factor=1
        transaction.state.log.replication.factor=1
      resources:
        limits:
          cpu: 400m
          memory: 2400Mi
        requests:
          cpu: 80m
          memory: 2000Mi
    kraft:
      enabled: false
    zookeeper:
      enabled: true
      resources:
        limits:
          cpu: 400m
          memory: 1600Mi
        requests:
          cpu: 80m
          memory: 1000Mi
